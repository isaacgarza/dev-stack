# dev-stack Configuration
# Copy this file to 'dev-stack-config.yaml' in the same directory and customize as needed

# Project configuration
project:
  # Used for container names and network naming
  name: dev-stack
  environment: local

# Services to enable
services:
  enabled:
    - redis
    - jaeger
    # - postgres     # Relational database for persistent data storage
    # - mysql        # Relational database (alternative to postgres)
    # - prometheus   # Metrics collection (requires Spring Boot Actuator)
    # - localstack   # AWS service emulation
    # - kafka        # Event streaming platform

# Service-specific overrides
overrides:
  redis:
    port: 6379
    password: "dev-password"
    memory_limit: "256m"

  postgres:
    port: 5432
    database: "my_app_dev"
    username: "app_user"
    password: "dev-password"
    memory_limit: "512m"

  mysql:
    port: 3306
    database: "my_app_dev"
    username: "root"
    password: "dev-password"
    memory_limit: "512m"

  jaeger:
    ui_port: 16686
    otlp_http_port: 4318
    memory_limit: "512m"

  prometheus:
    port: 9090
    memory_limit: "256m"
    scrape_interval: "15s"

  localstack:
    port: 4566
    dashboard_port: 8055
    memory_limit: "512m"
    # AWS services to enable (default: sqs only)
    services:
      - sqs
      - sns
      - dynamodb
      # - s3
      # - lambda
    # SQS queues to create automatically
    sqs_queues:
      - name: "user-events"
        visibility_timeout: 30
        message_retention_period: 1209600 # 14 days
        max_receive_count: 3
        dead_letter_queue: true # Creates "user-events-dlq"
      - name: "notifications"
        visibility_timeout: 60
        message_retention_period: 604800 # 7 days
        dead_letter_queue: "notifications-dlq" # Custom DLQ name
      - name: "orders"
        visibility_timeout: 30
        dead_letter_queue: true # Creates "orders-dlq"
    # SNS topics to create automatically
    sns_topics:
      - name: "user-notifications"
        display_name: "User Notifications"
        subscriptions:
          - protocol: "sqs"
            endpoint: "user-events"
            raw_message_delivery: true
          - protocol: "sqs"
            endpoint: "notifications"
            raw_message_delivery: false
      - name: "order-events"
        display_name: "Order Events"
        subscriptions:
          - protocol: "sqs"
            endpoint: "orders"
            raw_message_delivery: true
    # DynamoDB tables to create automatically
    dynamodb_tables:
      - name: "users"
        attribute_definitions:
          - AttributeName: "userId"
            AttributeType: "S"
          - AttributeName: "email"
            AttributeType: "S"
          - AttributeName: "createdTime"
            AttributeType: "S"
        key_schema:
          - AttributeName: "userId"
            KeyType: "HASH"
        provisioned_throughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        global_secondary_indexes:
          - IndexName: "EmailIndex"
            KeySchema:
              - AttributeName: "email"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
      - name: "orders"
        attribute_definitions:
          - AttributeName: "orderId"
            AttributeType: "S"
          - AttributeName: "customerId"
            AttributeType: "S"
          - AttributeName: "status"
            AttributeType: "S"
        key_schema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        provisioned_throughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        global_secondary_indexes:
          - IndexName: "CustomerIdIndex"
            KeySchema:
              - AttributeName: "customerId"
                KeyType: "HASH"
              - AttributeName: "status"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
      - name: "simple-table"
        attribute_definitions:
          - AttributeName: "id"
            AttributeType: "S"
        key_schema:
          - AttributeName: "id"
            KeyType: "HASH"
        provisioned_throughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  kafka:
    port: 9092
    ui_port: 8080
    zookeeper_port: 2181
    memory_limit: "1024m"
    auto_create_topics: true
    num_partitions: 1
    # Custom topics to create automatically
    topics:
      - name: "user-events"
        partitions: 3
        replication_factor: 1
        cleanup_policy: "delete"
        retention_ms: 604800000 # 7 days
      - name: "order-processing"
        partitions: 6
        replication_factor: 1
      - name: "notifications"
        partitions: 2
        replication_factor: 1
      - name: "audit-logs"
        # Uses defaults: partitions: 1, replication_factor: 1
        cleanup_policy: "compact"
      - name: "metrics"
        partitions: 1
        replication_factor: 1
        retention_ms: 86400000 # 1 day

# Validation settings
validation:
  skip_warnings: false # Set to true to skip validation warnings
  allow_multiple_databases: true # Allow both MySQL and PostgreSQL

# Advanced settings
advanced:
  auto_start: true # Start services after setup
  pull_latest_images: true # Pull latest Docker images
  cleanup_on_recreate: false # Keep data when recreating services

# Examples of common configurations:

# Minimal setup (just caching and tracing):
# services:
#   enabled:
#     - redis
#     - jaeger

# Database choice setup:
# services:
#   enabled:
#     - redis
#     - mysql        # or postgres
#     - jaeger

# Full observability setup:
# services:
#   enabled:
#     - redis
#     - postgres
#     - jaeger
#     - prometheus

# AWS development setup:
# services:
#   enabled:
#     - redis
#     - postgres
#     - jaeger
#     - localstack
# overrides:
#   localstack:
#     services:
#       - sqs
#       - sns
#       - s3
#       - dynamodb
#   sqs_queues:
#     - name: "my-queue"
#       visibility_timeout: 30
#       dead_letter_queue: true # Creates "my-queue-dlq"
#   sns_topics:
#     - name: "my-topic"
#       subscriptions:
#         - protocol: "sqs"
#           endpoint: "my-queue"
#           raw_message_delivery: true
#   dynamodb_tables:
#     - name: "my-table"
#       attribute_definitions:
#         - AttributeName: "id"
#           AttributeType: "S"
#       key_schema:
#         - AttributeName: "id"
#           KeyType: "HASH"
#       provisioned_throughput:
#         ReadCapacityUnits: 5
#         WriteCapacityUnits: 5

# Event-driven architecture setup:
# services:
#   enabled:
#     - redis
#     - postgres
#     - jaeger
#     - kafka
# overrides:
#   kafka:
#     auto_create_topics: true
#     num_partitions: 1
#     topics:
#       - name: "my-events"
#         partitions: 3
#         replication_factor: 1
#       - name: "my-logs"
#         partitions: 1
#         cleanup_policy: "compact"

# Everything enabled (high resource usage):
# services:
#   enabled:
#     - redis
#     - postgres
#     - mysql
#     - jaeger
#     - prometheus
#     - localstack
#     - kafka
