name: jaeger
description: Jaeger distributed tracing system for monitoring and troubleshooting microservices
category: observability
version: "1.51"

# Default configuration
defaults:
  image: jaegertracing/all-in-one:1.51
  ui_port: 16686
  otlp_http_port: 4318
  otlp_grpc_port: 4317
  http_port: 14268
  grpc_port: 14250
  storage: memory
  memory_limit: 512m

# Environment variables this service provides
environment:
  JAEGER_HOST: localhost
  JAEGER_UI_PORT: "${JAEGER_UI_PORT:-16686}"
  JAEGER_OTLP_HTTP_PORT: "${JAEGER_OTLP_HTTP_PORT:-4318}"
  JAEGER_OTLP_GRPC_PORT: "${JAEGER_OTLP_GRPC_PORT:-4317}"
  JAEGER_HTTP_PORT: "${JAEGER_HTTP_PORT:-14268}"
  JAEGER_GRPC_PORT: "${JAEGER_GRPC_PORT:-14250}"
  JAEGER_UI_URL: "http://localhost:${JAEGER_UI_PORT:-16686}"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:${JAEGER_OTLP_HTTP_PORT:-4318}"
  OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"

# Spring Boot configuration
spring_config:
  properties:
    - "management.tracing.enabled=true"
    - "management.otlp.tracing.endpoint=http://localhost:${JAEGER_OTLP_HTTP_PORT:-4318}/v1/traces"
    - "management.tracing.sampling.probability=1.0"
  yaml: |
    management:
      tracing:
        enabled: true
        sampling:
          probability: 1.0
      otlp:
        tracing:
          endpoint: http://localhost:${JAEGER_OTLP_HTTP_PORT:-4318}/v1/traces
          timeout: 10s
    otel:
      service:
        name: ${spring.application.name:unknown-service}
        version: ${spring.application.version:unknown}
      resource:
        attributes:
          service.name: ${spring.application.name:unknown-service}
          service.version: ${spring.application.version:unknown}
          environment: local
      traces:
        exporter: otlp
      exporter:
        otlp:
          endpoint: http://localhost:${JAEGER_OTLP_HTTP_PORT:-4318}/v1/traces
          protocol: http/protobuf

# Health check configuration
health_check:
  command: ["curl", "-f", "http://localhost:16686/"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

# Dependencies
dependencies: []

# Ports that need to be available
required_ports:
  - "${JAEGER_UI_PORT:-16686}"
  - "${JAEGER_OTLP_HTTP_PORT:-4318}"
  - "${JAEGER_OTLP_GRPC_PORT:-4317}"
  - "${JAEGER_HTTP_PORT:-14268}"
  - "${JAEGER_GRPC_PORT:-14250}"

# Volume mounts
volumes: []

# Web interfaces
web_interfaces:
  - name: Jaeger UI
    url: "http://localhost:${JAEGER_UI_PORT:-16686}"
    description: Trace visualization and exploration interface

# Documentation links
docs:
  - name: Jaeger Documentation
    url: https://www.jaegertracing.io/docs/
  - name: OpenTelemetry Integration
    url: https://opentelemetry.io/docs/instrumentation/java/
  - name: Spring Boot Tracing
    url: https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.micrometer-tracing

# Common use cases
use_cases:
  - Distributed tracing
  - Performance monitoring
  - Service dependency mapping
  - Request flow analysis
  - Microservices debugging
  - Latency troubleshooting

# Integration notes
integration_notes:
  - "Automatically collects traces from Spring Boot applications with micrometer-tracing"
  - "Supports both OTLP and legacy Jaeger protocols"
  - "Memory storage - traces are lost on container restart"
  - "For production, configure external storage (Elasticsearch, Cassandra)"
  - "Compatible with OpenTelemetry SDKs"
