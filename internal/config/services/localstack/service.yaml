name: localstack
description: LocalStack AWS cloud service emulator for local development
category: cloud-services
version: "latest"

# Default configuration
defaults:
  image: localstack/localstack:latest
  port: 4566
  dashboard_port: 8055
  memory_limit: 512m
  persistence: true
  default_services:
    - sqs
  available_services:
    - sqs
    - sns
    - s3
    - dynamodb
    - lambda
    - apigateway
    - cloudformation
    - iam
    - secretsmanager
    - ssm

# Environment variables this service provides
environment:
  LOCALSTACK_HOST: localhost
  LOCALSTACK_PORT: "${LOCALSTACK_PORT:-4566}"
  LOCALSTACK_DASHBOARD_PORT: "${LOCALSTACK_DASHBOARD_PORT:-8055}"
  LOCALSTACK_URL: "http://localhost:${LOCALSTACK_PORT:-4566}"
  AWS_ENDPOINT_URL: "http://localhost:${LOCALSTACK_PORT:-4566}"
  AWS_ACCESS_KEY_ID: "test"
  AWS_SECRET_ACCESS_KEY: "test"
  AWS_DEFAULT_REGION: "us-east-1"

# Spring Boot configuration
spring_config:
  properties:
    - "cloud.aws.credentials.access-key=test"
    - "cloud.aws.credentials.secret-key=test"
    - "cloud.aws.region.static=us-east-1"
    - "cloud.aws.stack.auto=false"
    - "cloud.aws.sqs.endpoint=http://localhost:${LOCALSTACK_PORT:-4566}"
    - "cloud.aws.sns.endpoint=http://localhost:${LOCALSTACK_PORT:-4566}"
    - "cloud.aws.s3.endpoint=http://localhost:${LOCALSTACK_PORT:-4566}"
  yaml: |
    cloud:
      aws:
        credentials:
          access-key: test
          secret-key: test
        region:
          static: us-east-1
        stack:
          auto: false
        sqs:
          endpoint: http://localhost:${LOCALSTACK_PORT:-4566}
        sns:
          endpoint: http://localhost:${LOCALSTACK_PORT:-4566}
        s3:
          endpoint: http://localhost:${LOCALSTACK_PORT:-4566}
        dynamodb:
          endpoint: http://localhost:${LOCALSTACK_PORT:-4566}

# Docker-specific configuration
docker:
  services:
    localstack:
      image: localstack/localstack:latest
      restart: unless-stopped
      networks:
        - dev-stack
      memory_limit: 512m
      environment:
        - SERVICES=${LOCALSTACK_SERVICES:-sqs,sns}
        - DEBUG=1
        - DATA_DIR=/tmp/localstack/data
        - PERSISTENCE=1
        - LAMBDA_EXECUTOR=docker-reuse
        - DOCKER_HOST=unix:///var/run/docker.sock
        - START_WEB=1
        - AWS_DEFAULT_REGION=us-east-1
        - AWS_ACCESS_KEY_ID=test
        - AWS_SECRET_ACCESS_KEY=test
        - EAGER_SERVICE_LOADING=1
      extra_hosts:
        - "host.docker.internal:host-gateway"
      health_check:
        test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 45s
    
    localstack-init:
      image: amazon/aws-cli:latest
      depends_on:
        - localstack
      restart: "no"
      networks:
        - dev-stack
      environment:
        - AWS_ACCESS_KEY_ID=test
        - AWS_SECRET_ACCESS_KEY=test
        - AWS_DEFAULT_REGION=us-east-1
      command: |
        sh -c "
          apk add --no-cache curl jq bash
          chmod +x /usr/local/bin/init-aws-resources.sh
          /usr/local/bin/init-aws-resources.sh
        "

# Health check configuration
health_check:
  command: ["curl", "-f", "http://localhost:4566/health"]
  test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 45s

# Dependencies
dependencies: []

# Ports that need to be available
required_ports:
  - "${LOCALSTACK_PORT:-4566}"
  - "${LOCALSTACK_DASHBOARD_PORT:-8055}"

# Volume mounts
volumes:
  - name: localstack-data
    mount: /tmp/localstack
    description: LocalStack service data persistence
  - name: docker-sock
    mount: /var/run/docker.sock
    description: Docker socket for Lambda execution
    host_path: /var/run/docker.sock

# Web interfaces
web_interfaces:
  - name: LocalStack Dashboard
    url: "http://localhost:${LOCALSTACK_DASHBOARD_PORT:-8055}"
    description: LocalStack web dashboard for service management
  - name: LocalStack Health
    url: "http://localhost:${LOCALSTACK_PORT:-4566}/health"
    description: Service health and status endpoint

# Common CLI commands
cli_commands:
  connect: "aws --endpoint-url=http://localhost:${LOCALSTACK_PORT:-4566} --region=us-east-1"
  sqs_list: "aws --endpoint-url=http://localhost:${LOCALSTACK_PORT:-4566} sqs list-queues --region=us-east-1"
  sns_list: "aws --endpoint-url=http://localhost:${LOCALSTACK_PORT:-4566} sns list-topics --region=us-east-1"
  s3_list: "aws --endpoint-url=http://localhost:${LOCALSTACK_PORT:-4566} s3 ls --region=us-east-1"

# Documentation links
docs:
  - name: LocalStack Documentation
    url: https://docs.localstack.cloud/
  - name: AWS CLI with LocalStack
    url: https://docs.localstack.cloud/user-guide/integrations/aws-cli/
  - name: Spring Cloud AWS
    url: https://docs.awspring.io/spring-cloud-aws/docs/current/reference/html/

# Common use cases
use_cases:
  - SQS message queue testing
  - SNS pub/sub messaging
  - S3 object storage simulation
  - DynamoDB local development
  - Lambda function testing
  - AWS service integration testing
  - Cloud development without AWS costs

# Integration notes
integration_notes:
  - "Default services enabled: SQS only (lightweight setup)"
  - "Additional services can be enabled via configuration"
  - "Uses test credentials - not suitable for production"
  - "Requires Docker socket access for Lambda functions"
  - "Data persistence enabled for development continuity"
  - "Dashboard provides easy service management interface"

# Required dependencies
required_dependencies:
  maven:
    - "org.springframework.cloud:spring-cloud-starter-aws"
    - "org.springframework.cloud:spring-cloud-starter-aws-messaging"
  gradle:
    - "implementation 'org.springframework.cloud:spring-cloud-starter-aws'"
    - "implementation 'org.springframework.cloud:spring-cloud-starter-aws-messaging'"

# Service configuration options
service_options:
  sqs:
    description: "Simple Queue Service - Message queuing"
    memory_impact: "Low"
    startup_time: "Fast"
  sns:
    description: "Simple Notification Service - Pub/Sub messaging"
    memory_impact: "Low"
    startup_time: "Fast"
  s3:
    description: "Simple Storage Service - Object storage"
    memory_impact: "Medium"
    startup_time: "Medium"
  dynamodb:
    description: "NoSQL database service"
    memory_impact: "Medium"
    startup_time: "Medium"
  lambda:
    description: "Serverless function execution"
    memory_impact: "High"
    startup_time: "Slow"
  apigateway:
    description: "API Gateway for REST APIs"
    memory_impact: "Medium"
    startup_time: "Medium"

# DynamoDB tables configuration
dynamodb_tables:
  description: "DynamoDB tables to create automatically"
  example:
    - name: "users"
      attribute_definitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "email"
          AttributeType: "S"
        - AttributeName: "createdTime"
          AttributeType: "S"
      key_schema:
        - AttributeName: "userId"
          KeyType: "HASH"
      provisioned_throughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      global_secondary_indexes:
        - IndexName: "EmailIndex"
          KeySchema:
            - AttributeName: "email"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      table_class: "STANDARD"
    - name: "orders"
      attribute_definitions:
        - AttributeName: "orderId"
          AttributeType: "S"
        - AttributeName: "customerId"
          AttributeType: "S"
        - AttributeName: "status"
          AttributeType: "S"
      key_schema:
        - AttributeName: "orderId"
          KeyType: "HASH"
      provisioned_throughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      global_secondary_indexes:
        - IndexName: "CustomerIdIndex"
          KeySchema:
            - AttributeName: "customerId"
              KeyType: "HASH"
            - AttributeName: "status"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

# AWS resource configuration
aws_resources:
  sqs_queues:
    description: "SQS queues to create automatically"
    example:
      - name: "user-events"
        visibility_timeout: 30
        message_retention_period: 1209600 # 14 days
        receive_message_wait_time: 0
        delay_seconds: 0
        max_receive_count: 3
        dead_letter_queue: true # Creates "user-events-dlq"
      - name: "notifications"
        visibility_timeout: 60
        message_retention_period: 604800 # 7 days
        dead_letter_queue: "notifications-dlq" # Custom DLQ name

  sns_topics:
    description: "SNS topics to create automatically"
    example:
      - name: "user-notifications"
        display_name: "User Notifications"
        subscriptions:
          - protocol: "sqs"
            endpoint: "user-events"
            raw_message_delivery: true
          - protocol: "sqs"
            endpoint: "notifications"
            raw_message_delivery: false
      - name: "system-alerts"
        display_name: "System Alerts"
        subscriptions:
          - protocol: "email"
            endpoint: "admin@example.com"
            raw_message_delivery: false

# Configuration schema for overrides
configuration_schema:
  sqs_queues:
    type: "array"
    description: "List of SQS queues to create"
    items:
      name:
        type: "string"
        required: true
        description: "Queue name"
      visibility_timeout:
        type: "integer"
        default: 30
        description: "Visibility timeout in seconds"
      message_retention_period:
        type: "integer"
        default: 1209600
        description: "Message retention period in seconds (14 days default)"
      receive_message_wait_time:
        type: "integer"
        default: 0
        description: "Long polling wait time in seconds"
      delay_seconds:
        type: "integer"
        default: 0
        description: "Delivery delay in seconds"
      max_receive_count:
        type: "integer"
        default: 3
        description: "Max receives before moving to DLQ"
      dead_letter_queue:
        type: "string or boolean"
        optional: true
        description: "Dead letter queue name (string) or true to auto-create as {{queue-name}}-dlq"

  sns_topics:
    type: "array"
    description: "List of SNS topics to create"
    items:
      name:
        type: "string"
        required: true
        description: "Topic name"
      display_name:
        type: "string"
        optional: true
        description: "Human-readable topic name"
      subscriptions:
        type: "array"
        optional: true
        description: "Topic subscriptions"
        items:
          protocol:
            type: "string"
            required: true
            enum: ["sqs", "http", "https", "email", "sms", "lambda"]
            description: "Subscription protocol"
          endpoint:
            type: "string"
            required: true
            description: "Subscription endpoint (queue name for SQS, URL for HTTP, etc.)"
          raw_message_delivery:
            type: "boolean"
            default: true
            description: "Whether to deliver raw messages (true) or JSON wrapped (false)"
          filter_policy:
            type: "object"
            optional: true
            description: "Message filtering policy (JSON object)"

      dynamodb_tables:
        type: "array"
        description: "List of DynamoDB tables to create"
        items:
          name:
            type: "string"
            required: true
            description: "Table name"
          attribute_definitions:
            type: "array"
            required: true
            description: "Table attribute definitions"
            items:
              AttributeName:
                type: "string"
                required: true
                description: "Attribute name"
              AttributeType:
                type: "string"
                required: true
                enum: ["S", "N", "B"]
                description: "Attribute type (S=String, N=Number, B=Binary)"
          key_schema:
            type: "array"
            required: true
            description: "Table key schema"
            items:
              AttributeName:
                type: "string"
                required: true
                description: "Attribute name"
              KeyType:
                type: "string"
                required: true
                enum: ["HASH", "RANGE"]
                description: "Key type (HASH=partition key, RANGE=sort key)"
          provisioned_throughput:
            type: "object"
            required: true
            description: "Provisioned throughput settings"
            properties:
              ReadCapacityUnits:
                type: "integer"
                default: 5
                description: "Read capacity units"
              WriteCapacityUnits:
                type: "integer"
                default: 5
                description: "Write capacity units"
          global_secondary_indexes:
            type: "array"
            optional: true
            description: "Global secondary indexes"
            items:
              IndexName:
                type: "string"
                required: true
                description: "Index name"
              KeySchema:
                type: "array"
                required: true
                description: "Index key schema"
              Projection:
                type: "object"
                required: true
                description: "Index projection"
              ProvisionedThroughput:
                type: "object"
                required: true
                description: "Index throughput"
          table_class:
            type: "string"
            default: "STANDARD"
            enum: ["STANDARD", "STANDARD_INFREQUENT_ACCESS"]
            description: "Table class"

# Validation warnings
validation:
  warnings:
    - condition: "many_services_enabled"
      message: "Many AWS services enabled. This will increase memory usage and startup time significantly."
      threshold: 4
    - condition: "lambda_without_docker_socket"
      message: "Lambda service enabled but Docker socket not mounted. Lambda functions may not work properly."
    - condition: "sns_without_sqs"
      message: "SNS topics configured but SQS service not enabled. SQS subscriptions will not work."
    - condition: "sqs_subscription_queue_missing"
      message: "SNS topic has SQS subscription but referenced queue is not defined in sqs_queues."
    - condition: "dynamodb_without_service"
      message: "DynamoDB tables configured but DynamoDB service not enabled in services list."
    - condition: "high_throughput_tables"
      message: "DynamoDB tables configured with high throughput. This may impact LocalStack performance."
      threshold: 100
