name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  # Go version is managed centrally in .go-version file
  GO_VERSION: "" # Will be set dynamically from .go-version

jobs:
  get-versions:
    name: Get Go Versions
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.versions.outputs.go-version }}
      go-matrix: ${{ steps.versions.outputs.go-matrix }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Get versions
        id: versions
        run: |
          GO_VERSION=$(cat .go-version | tr -d '[:space:]')
          echo "go-version=$GO_VERSION" >> $GITHUB_OUTPUT

          # Get matrix versions using our script
          chmod +x scripts/get-go-version.sh
          GO_MATRIX=$(./scripts/get-go-version.sh --github-matrix)
          echo "go-matrix=$GO_MATRIX" >> $GITHUB_OUTPUT

          echo "Current Go version: $GO_VERSION"
          echo "Go matrix for testing: $GO_MATRIX"

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: get-versions
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ${{ fromJson(needs.get-versions.outputs.go-matrix) }}
      fail-fast: false

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == needs.get-versions.outputs.go-version
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == needs.get-versions.outputs.go-version
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == needs.get-versions.outputs.go-version
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: get-versions
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Go with centralized version
        uses: ./.github/actions/setup-go-version
        id: setup-go

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: get-versions
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Go with centralized version
        uses: ./.github/actions/setup-go-version
        id: setup-go

      - name: Build for current platform
        run: make build

      - name: Build for all platforms
        run: make build-all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/
          retention-days: 7

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [get-versions, build]
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Go with centralized version
        uses: ./.github/actions/setup-go-version
        id: setup-go

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/

      - name: Make binary executable
        run: chmod +x build/dev-stack

      - name: Run integration tests
        run: |
          if [ -d "tests" ]; then
            make test-go-integration
          else
            echo "No integration tests found, skipping..."
          fi

  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Validate Go modules
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Check gofmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Check go vet
        run: go vet ./...

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" --include="*.go" .; then
            echo "Found TODO/FIXME comments. Please resolve them before merging."
            exit 1
          fi
        continue-on-error: true
