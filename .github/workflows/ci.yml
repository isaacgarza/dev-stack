name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Single job that consolidates all CI checks for easy required status checking
  ci:
    name: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: ./.github/actions/setup-go-version
        id: setup-go

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      # Validation checks
      - name: Validate Go modules
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      # Linting
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          args: --timeout=5m

      # Testing
      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./cmd/... ./internal/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      # Build verification
      - name: Install Task
        run: |
          curl -sL https://taskfile.dev/install.sh | sh -s -- -d -b ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build
        run: task build

      - name: Verify binary
        run: |
          chmod +x build/dev-stack
          ./build/dev-stack --version || ./build/dev-stack version || echo "Binary built successfully"

  # Matrix testing for multiple platforms/versions (optional for required checks)
  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'test-matrix')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ["1.21", "1.22"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race ./cmd/... ./internal/...

      - name: Build
        run: go build -o dev-stack-${{ matrix.os }}-${{ matrix.go-version }} ./cmd/dev-stack

  # Integration tests (separate job for optional requirement)
  integration:
    name: Integration
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'integration')
    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: ./.github/actions/setup-go-version

      - name: Install Task
        run: |
          curl -sL https://taskfile.dev/install.sh | sh -s -- -d -b ~/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build binary
        run: task build

      - name: Make binary executable
        run: chmod +x build/dev-stack

      - name: Run integration tests
        run: |
          if find ./tests -name "*_test.go" 2>/dev/null | grep -q .; then
            cd tests/integration && go test -v -tags=integration .
          else
            echo "No integration tests found, skipping..."
          fi
