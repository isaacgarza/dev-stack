name: Documentation

on:
  push:
    branches: [main]
    paths:
      - "docs/**"
      - "*.md"
      - "cmd/**"
      - "internal/**"
  pull_request:
    branches: [main]
    paths:
      - "docs/**"
      - "*.md"
      - "cmd/**"
      - "internal/**"
  workflow_dispatch:

env:
  # Go version is managed centrally in .go-version file
  GO_VERSION: ""

jobs:
  lint-docs:
    name: Lint Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Lint Markdown files
        run: |
          markdownlint README.md
          markdownlint docs/
        continue-on-error: true

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ".github/markdown-link-check.json"
        continue-on-error: true

  generate-cli-docs:
    name: Generate CLI Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go with centralized version
        uses: ./.github/actions/setup-go-version
        id: setup-go

      - name: Download dependencies
        run: go mod download

      - name: Build CLI
        run: make build

      - name: Generate CLI documentation
        run: |
          mkdir -p docs/cli
          ./build/dev-stack help > docs/cli/help.md || echo "# CLI Help\n\nCLI help generation failed or not implemented yet." > docs/cli/help.md

          # Generate command reference if the CLI supports it
          if ./build/dev-stack --help | grep -q "completion"; then
            echo "Generating command reference..."
            ./build/dev-stack completion bash > docs/cli/completion.bash || true
            ./build/dev-stack completion zsh > docs/cli/completion.zsh || true
            ./build/dev-stack completion fish > docs/cli/completion.fish || true
          fi

      - name: Upload CLI docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-docs
          path: docs/cli/

  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go with centralized version
        uses: ./.github/actions/setup-go-version
        id: setup-go

      - name: Build CLI
        run: make build

      - name: Validate example commands
        run: |
          echo "Validating example commands in documentation..."

          # Extract code blocks from markdown files and validate CLI examples
          find docs/ -name "*.md" -exec grep -l "dev-stack" {} \; | while read -r file; do
            echo "Checking examples in $file..."
            # This is a placeholder for example validation
            # In a real implementation, you'd extract and test CLI commands
          done

  build-docs-site:
    name: Build Documentation Site
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [lint-docs, generate-cli-docs, validate-examples]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download CLI docs
        uses: actions/download-artifact@v3
        with:
          name: cli-docs
          path: docs/cli/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup documentation site generator
        run: |
          # Install a static site generator (using mkdocs as example)
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

          # Create mkdocs.yml if it doesn't exist
          if [ ! -f mkdocs.yml ]; then
            cat > mkdocs.yml << 'EOF'
          site_name: dev-stack Documentation
          site_description: Developer environment stack management tool
          site_url: https://isaacgarza.github.io/dev-stack
          repo_url: https://github.com/isaacgarza/dev-stack
          repo_name: isaacgarza/dev-stack

          theme:
            name: material
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.expand
              - navigation.top
              - search.highlight
              - search.share
            palette:
              - scheme: default
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-7
                  name: Switch to dark mode
              - scheme: slate
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-4
                  name: Switch to light mode

          plugins:
            - search
            - mermaid2

          nav:
            - Home: index.md
            - Setup: setup.md
            - Usage: usage.md
            - Configuration: configuration.md
            - CLI Reference: cli/help.md
            - Contributing: contributing.md
            - Troubleshooting: troubleshooting.md

          markdown_extensions:
            - admonition
            - codehilite
            - pymdownx.superfences:
                custom_fences:
                  - name: mermaid
                    class: mermaid
                    format: !!python/name:mermaid2.fence_mermaid
          EOF
          fi

      - name: Generate documentation index
        run: |
          # Create index.md if it doesn't exist
          if [ ! -f docs/index.md ]; then
            cat > docs/index.md << 'EOF'
          # dev-stack Documentation

          Welcome to the dev-stack documentation! This tool helps you manage your development environment stack efficiently.

          ## Quick Start

          ```bash
          # Install dev-stack
          curl -L https://github.com/isaacgarza/dev-stack/releases/latest/download/dev-stack-linux-amd64 -o dev-stack
          chmod +x dev-stack
          sudo mv dev-stack /usr/local/bin/

          # Initialize your project
          dev-stack init

          # Start your development environment
          dev-stack up
          ```

          ## Features

          - 🚀 Quick environment setup
          - 🐳 Docker integration
          - ⚙️ Flexible configuration
          - 📦 Service management
          - 🔧 Developer tools

          ## Navigation

          - [Setup Guide](setup.md) - Get started with dev-stack
          - [Usage](usage.md) - Learn how to use dev-stack
          - [Configuration](configuration.md) - Configure your environment
          - [CLI Reference](cli/help.md) - Command line interface documentation
          - [Contributing](contributing.md) - Contribute to the project
          - [Troubleshooting](troubleshooting.md) - Common issues and solutions
          EOF
          fi

      - name: Build documentation site
        run: |
          mkdocs build --clean --strict

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: site/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-docs-site
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v3
        with:
          name: documentation-site
          path: site/

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  docs-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs: [lint-docs, generate-cli-docs, validate-examples, build-docs-site]
    if: always()
    steps:
      - name: Documentation workflow summary
        run: |
          echo "## Documentation Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Lint Docs
          if [ "${{ needs.lint-docs.result }}" = "success" ]; then
            echo "✅ **Documentation Linting**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Documentation Linting**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi

          # CLI Docs Generation
          if [ "${{ needs.generate-cli-docs.result }}" = "success" ]; then
            echo "✅ **CLI Documentation**: Generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CLI Documentation**: Generation failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Example Validation
          if [ "${{ needs.validate-examples.result }}" = "success" ]; then
            echo "✅ **Example Validation**: All examples valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Example Validation**: Check examples" >> $GITHUB_STEP_SUMMARY
          fi

          # Site Build
          if [ "${{ needs.build-docs-site.result }}" = "success" ]; then
            echo "✅ **Documentation Site**: Built successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-docs-site.result }}" = "skipped" ]; then
            echo "⏭️ **Documentation Site**: Skipped (not main branch)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Documentation Site**: Build failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
            echo "📚 **Documentation will be deployed to GitHub Pages**" >> $GITHUB_STEP_SUMMARY
          fi
