name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write

jobs:
  # Single consolidated security job for easy required status checking
  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: ./.github/actions/setup-go-version

      - name: Download dependencies
        run: go mod download

      # Go security scanner
      - name: Install security tools
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run Gosec security scanner
        run: |
          echo "🔍 Running Gosec security scan..."
          if [ -f ".gosec.conf" ]; then
            gosec -conf .gosec.conf -fmt json -out gosec-results.json ./... || true
            gosec -conf .gosec.conf -fmt text ./... | tee gosec-output.txt || true
          else
            gosec -fmt json -out gosec-results.json ./... || true
            gosec -fmt text ./... | tee gosec-output.txt || true
          fi

      - name: Run vulnerability scanner
        run: |
          echo "🔍 Running vulnerability scan..."
          govulncheck ./... | tee vuln-output.txt || echo "Vulnerability scan completed"

      # Secrets scanning
      - name: Run TruffleHog secrets scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

      # Basic security checks
      - name: Check for security issues
        run: |
          echo "🔍 Running basic security checks..."

          # Check for hardcoded secrets patterns
          echo "Checking for hardcoded secrets..."
          if grep -r -E "(password|pwd|secret|key|token)\s*[:=]\s*['\"][^'\"]{8,}" --include="*.go" . ; then
            echo "⚠️ Potential hardcoded secrets found"
            exit 1
          fi

          # Check for unsafe functions
          echo "Checking for unsafe function usage..."
          if grep -r "unsafe\." --include="*.go" . ; then
            echo "⚠️ Unsafe package usage found - review carefully"
          fi

          # Check for dangerous imports
          echo "Checking imports..."
          go list -json ./... | jq -r '.Imports[]?' | sort | uniq | grep -E "(os/exec)" && echo "⚠️ Found potentially dangerous imports" || echo "✅ Standard imports look safe"

      - name: Security summary
        if: always()
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Gosec results
          if [ -f gosec-output.txt ]; then
            if grep -q "Issues : 0" gosec-output.txt; then
              echo "✅ **Gosec**: No security issues found" >> $GITHUB_STEP_SUMMARY
            else
              issues=$(grep -c "^\[.*\] - G" gosec-output.txt || echo "0")
              echo "⚠️ **Gosec**: Found $issues security issue(s)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # Vulnerability results
          if [ -f vuln-output.txt ]; then
            if grep -q "No vulnerabilities found" vuln-output.txt; then
              echo "✅ **Vulnerabilities**: No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Vulnerabilities**: Issues detected" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 Check individual steps above for detailed results." >> $GITHUB_STEP_SUMMARY

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: |
            gosec-results.json
            gosec-output.txt
            vuln-output.txt
          retention-days: 30

  # Advanced security scanning (optional job)
  advanced-security:
    name: Advanced Security
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'security-deep-scan')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: ./.github/actions/setup-go-version

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run additional security tools
        run: |
          echo "Running additional security analysis..."
          # Add any additional security tools here
          echo "Advanced security scan completed"
