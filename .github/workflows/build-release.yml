name: Build and Release

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Version to build and release'
      tag_name:
        required: true
        type: string
        description: 'Git tag name for the release'

permissions:
  contents: write
  packages: write

jobs:
  test-before-build:
    name: Pre-Build Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go with centralized version
        uses: ./.github/actions/setup-go-version
        id: setup-go

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ steps.setup-go.outputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ steps.setup-go.outputs.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race ./...

      - name: Run linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test-before-build
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go with centralized version
        uses: ./.github/actions/setup-go-version
        id: setup-go

      - name: Set up environment variables
        run: |
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "COMMIT=${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Build all platforms
        run: make build-all VERSION=${{ env.VERSION }}

      - name: List build artifacts
        run: |
          echo "📦 Build artifacts:"
          ls -la build/
          echo ""
          echo "📏 File sizes:"
          du -h build/*

      - name: Generate checksums
        run: |
          cd build
          sha256sum * > checksums.txt
          echo "🔐 Generated checksums:"
          cat checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/
          retention-days: 30

      - name: Upload release assets to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📤 Uploading release assets to ${{ inputs.tag_name }}"
          gh release upload ${{ inputs.tag_name }} build/* --clobber

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-before-build
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
            type=semver,pattern={{major}},value=${{ inputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ inputs.version }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker build summary
        run: |
          echo "🐳 Docker images built and pushed:"
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'

  verify-release:
    name: Verify Release Assets
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/

      - name: Verify checksums
        run: |
          cd build
          echo "🔍 Verifying checksums..."
          sha256sum -c checksums.txt
          echo "✅ All checksums verified!"

      - name: Test binary functionality
        run: |
          echo "🧪 Testing binary functionality..."
          chmod +x build/dev-stack-linux-amd64
          ./build/dev-stack-linux-amd64 version
          echo "✅ Binary test passed!"

      - name: Verify Docker image
        run: |
          echo "🐳 Verifying Docker image..."
          docker run --rm ghcr.io/${{ github.repository }}:${{ inputs.version }} version
          echo "✅ Docker image test passed!"

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker, verify-release]
    if: always()
    steps:
      - name: Release Success Summary
        if: needs.build-binaries.result == 'success' && needs.build-docker.result == 'success' && needs.verify-release.result == 'success'
        run: |
          echo "🎉 Release ${{ inputs.version }} completed successfully!"
          echo ""
          echo "📦 Binaries: https://github.com/${{ github.repository }}/releases/tag/${{ inputs.tag_name }}"
          echo "🐳 Docker: ghcr.io/${{ github.repository }}:${{ inputs.version }}"
          echo ""
          echo "🚀 Ready for distribution!"

      - name: Release Failure Summary
        if: needs.build-binaries.result == 'failure' || needs.build-docker.result == 'failure' || needs.verify-release.result == 'failure'
        run: |
          echo "❌ Release ${{ inputs.version }} completed with failures:"
          echo "  Binaries: ${{ needs.build-binaries.result }}"
          echo "  Docker: ${{ needs.build-docker.result }}"
          echo "  Verification: ${{ needs.verify-release.result }}"
          echo ""
          echo "Please check the workflow logs for details."
          exit 1
