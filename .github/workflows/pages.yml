name: Deploy Documentation to GitHub Pages

on:
  push:
    branches: [main]
    paths:
      - "content/**"
      - "themes/**"
      - "hugo.toml"
      - "layouts/**"
      - "static/**"
      - "assets/**"
      - ".github/workflows/pages.yml"
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.121.0
    steps:
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: "0.121.0"
          extended: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Go
        uses: ./.github/actions/setup-go-version

      - name: Verify content structure
        run: |
          echo "üîç Verifying content structure..."
          if [ ! -d "content" ]; then
            echo "‚ùå Content directory not found"
            exit 1
          fi

          if [ ! -f "content/_index.md" ]; then
            echo "‚ùå Homepage content not found"
            exit 1
          fi

          echo "‚úÖ Content structure verified"
          echo "üìÅ Content files:"
          ls -la content/

      - name: Build CLI for documentation
        run: |
          if make build 2>/dev/null; then
            echo "‚úÖ CLI built successfully"
          else
            echo "‚ö†Ô∏è CLI build failed, continuing without CLI docs"
          fi

      - name: Generate CLI documentation
        run: |
          mkdir -p content/cli-reference

          # Try to generate real CLI docs first
          if [ -f "./build/dev-stack" ] && ./build/dev-stack --help > /tmp/cli-help.txt 2>&1; then
            echo "üîç Generating CLI documentation from built binary..."
            {
              echo '---'
              echo 'title: "CLI Reference"'
              echo 'description: "Complete command reference for dev-stack CLI"'
              echo 'weight: 30'
              echo '---'
              echo ''
              echo '# CLI Reference'
              echo ''
              echo '```'
              cat /tmp/cli-help.txt
              echo '```'
            } > content/cli-reference/index.md
            echo "‚úÖ CLI documentation generated from binary"
          else
            echo "üîç Creating CLI reference placeholder..."
            {
              echo '---'
              echo 'title: "CLI Reference"'
              echo 'description: "Complete command reference for dev-stack CLI"'
              echo 'weight: 30'
              echo '---'
              echo ''
              echo '# CLI Reference'
              echo ''
              echo 'CLI help generation is not yet implemented.'
              echo ''
              echo 'Check back soon or [contribute to the project]({{< ref "/contributing" >}}) to help add this feature!'
            } > content/cli-reference/index.md
            echo "‚úÖ CLI reference placeholder created"
          fi

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Check for Node.js dependencies
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            echo "No Node.js dependencies found, skipping"
          fi

      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          echo "üîç Hugo version:"
          hugo version
          echo ""
          echo "üîç Site configuration:"
          hugo config | grep baseURL || echo "Base URL: (default)"
          echo ""
          echo "üîç Theme check:"
          if [ -d "themes/PaperMod" ]; then
            echo "‚úÖ PaperMod theme found"
          else
            echo "‚ùå PaperMod theme not found"
            echo "Available themes:"
            ls -la themes/ || echo "No themes directory"
          fi
          echo ""
          echo "üîç Building Hugo site..."
          if hugo --gc --minify --baseURL "${{ steps.pages.outputs.base_url }}/"; then
            echo "‚úÖ Hugo build completed successfully"
            echo ""
            echo "üìÅ Contents of public directory:"
            ls -la public/ | head -10
            echo ""
            echo "üìã Build summary:"
            find public -name "*.html" | wc -l | xargs echo "HTML files:"
            find public -name "*.css" | wc -l | xargs echo "CSS files:"
            find public -name "*.js" | wc -l | xargs echo "JS files:"
          else
            echo "‚ùå Hugo build failed"
            echo "Checking for errors..."
            hugo --gc --minify --baseURL "${{ steps.pages.outputs.base_url }}/" --verbose || true
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
