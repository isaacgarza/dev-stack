name: Validation

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "content/**"
      - "hugo.toml"
      - "themes/**"
      - "*.md"
      - ".commitlintrc.json"
      - ".release-please-config.json"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Single validation job for easy required status checking
  validation:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Commit validation (only on PRs)
      - name: Validate conventional commits
        if: github.event_name == 'pull_request'
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json

      # Configuration validation
      - name: Install tools
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          sudo apt-get update && sudo apt-get install -y jq

      - name: Validate configuration files
        run: |
          echo "🔍 Validating configuration files..."

          # Check if release config generation script exists and run it
          if [ -f "scripts/generate-release-configs.sh" ]; then
            chmod +x scripts/generate-release-configs.sh
            ./scripts/generate-release-configs.sh

            if git diff --exit-code .commitlintrc.json .release-please-config.json; then
              echo "✅ Release configuration files are up to date"
            else
              echo "❌ Release configuration files are out of date"
              echo "Run 'task generate-release-configs' to update them"
              git diff --name-only .commitlintrc.json .release-please-config.json
              exit 1
            fi
          else
            echo "⚠️ Release config generation script not found, skipping validation"
          fi

      # Documentation validation
      - name: Setup Node.js for documentation tools
        uses: actions/setup-node@v5
        with:
          node-version: "18"
          cache: "npm"

      - name: Install documentation dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, skipping npm dependencies"
          fi

      - name: Lint markdown files
        run: |
          echo "🔍 Linting markdown files..."
          if [ -f package.json ] && npm list markdownlint-cli2 >/dev/null 2>&1; then
            npm run lint:md || echo "⚠️ Markdown linting found issues"
          else
            echo "⚠️ Markdown linting not configured, skipping"
          fi

      - name: Check for broken links
        uses: tcort/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ".github/markdown-link-check.json"
        continue-on-error: true

      # Hugo validation
      - name: Setup Hugo for validation
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: "0.151.0"
          extended: true

      - name: Validate Hugo configuration
        run: |
          echo "🔍 Validating Hugo configuration..."

          # Check if Hugo config exists (either location)
          if [ ! -f "hugo.toml" ] && [ ! -f "config/_default/hugo.toml" ]; then
            echo "❌ Hugo configuration file not found"
            echo "Expected: hugo.toml or config/_default/hugo.toml"
            exit 1
          fi

          # Validate Hugo config syntax
          if ! hugo config > /dev/null 2>&1; then
            echo "❌ Hugo configuration is invalid"
            hugo config
            exit 1
          fi

          echo "✅ Hugo configuration is valid"

      - name: Validate Hugo content structure
        run: |
          echo "🔍 Validating Hugo content structure..."

          # Check required content files
          REQUIRED_FILES=(
            "docs/_index.md"
            "docs/setup.md"
            "docs/usage.md"
            "docs/services.md"
            "docs/configuration.md"
            "docs/contributing.md"
            "docs/troubleshooting.md"
          )

          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required content file missing: $file"
              exit 1
            fi
          done

          # Check CLI reference structure
          if [ ! -d "docs/cli-reference" ]; then
            echo "⚠️ CLI reference directory not found, will be created during build"
          fi

          # Validate frontmatter in main content files (only files that should be Hugo pages)
          echo "🔍 Checking frontmatter syntax..."
          FRONTMATTER_FILES=(
            "docs/_index.md"
            "docs/setup.md"
            "docs/usage.md"
            "docs/services.md"
            "docs/configuration.md"
            "docs/contributing.md"
            "docs/troubleshooting.md"
            "docs/reference.md"
          )

          for file in "${FRONTMATTER_FILES[@]}"; do
            if [ -f "$file" ]; then
              # Check if file has frontmatter
              if ! head -n 1 "$file" | grep -q "^---$"; then
                echo "❌ Missing frontmatter in: $file"
                exit 1
              fi
            fi
          done

          # Basic frontmatter validation
          if ! hugo list all --source . >/dev/null 2>&1; then
            echo "❌ Invalid frontmatter detected in content files"
            exit 1
          fi

          echo "✅ Content structure is valid"

      - name: Test Hugo build (dry run)
        run: |
          echo "🔍 Testing Hugo build..."

          # Create temporary CLI reference if it doesn't exist
          if [ ! -f "docs/cli-reference/index.md" ]; then
            mkdir -p docs/cli-reference
            cat > docs/cli-reference/index.md << 'EOF'
          ---
          title: "CLI Reference"
          description: "Complete command reference for dev-stack CLI"
          weight: 30
          ---

          # CLI Reference

          This page will be automatically generated during deployment.
          EOF
          fi

          # Test Hugo build without deploying
          if hugo --gc --minify --destination public-test; then
            echo "✅ Hugo build test successful"

            # Check build output
            echo "📊 Build statistics:"
            echo "- HTML files: $(find public-test -name "*.html" | wc -l)"
            echo "- CSS files: $(find public-test -name "*.css" | wc -l)"
            echo "- JS files: $(find public-test -name "*.js" | wc -l)"

            # Clean up test build
            rm -rf public-test
          else
            echo "❌ Hugo build test failed"
            exit 1
          fi

      - name: Validate Hugo internal links
        run: |
          echo "🔍 Validating Hugo internal links..."

          # Check for Hugo ref shortcodes that might be broken
          if grep -r "{{< ref.*>}}" docs/ 2>/dev/null; then
            echo "Found Hugo ref shortcodes, validating..."

            # Build site to test internal links
            mkdir -p docs/cli-reference
            if [ ! -f "docs/cli-reference/index.md" ]; then
              cat > docs/cli-reference/index.md << 'EOF'
          ---
          title: "CLI Reference"
          description: "Complete command reference for dev-stack CLI"
          weight: 30
          ---

          # CLI Reference

          Placeholder for validation.
          EOF
            fi

            # Test build with link validation
            if hugo --gc --destination public-link-test 2>&1 | tee hugo-build.log; then
              # Check for REF_NOT_FOUND errors
              if grep -q "REF_NOT_FOUND" hugo-build.log; then
                echo "❌ Broken internal links found:"
                grep "REF_NOT_FOUND" hugo-build.log
                rm -rf public-link-test hugo-build.log
                exit 1
              fi
              echo "✅ All internal links are valid"
            else
              echo "❌ Hugo build failed during link validation"
              cat hugo-build.log
              rm -rf public-link-test hugo-build.log
              exit 1
            fi

            rm -rf public-link-test hugo-build.log
          else
            echo "✅ No Hugo ref shortcodes found"
          fi

      # Code quality checks
      - name: Check for TODO/FIXME comments
        run: |
          echo "🔍 Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" --include="*.go" --include="*.md" .; then
            echo "⚠️ Found TODO/FIXME comments - consider addressing before release"
          else
            echo "✅ No TODO/FIXME comments found"
          fi
        continue-on-error: true

      - name: Check file permissions
        run: |
          echo "🔍 Checking file permissions..."
          # Check for executable files that shouldn't be
          find . -type f -perm /111 ! -path "./.git/*" ! -path "./build/*" ! -path "./scripts/*" ! -name "*.sh" ! -name "dev-stack*" | while read -r file; do
            echo "⚠️ Unexpected executable file: $file"
          done

      - name: Validation summary
        if: always()
        run: |
          echo "## 📋 Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Configuration**: Files validated" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Documentation**: Checked for issues" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Hugo**: Site configuration and content validated" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Code Quality**: Basic checks completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 See individual steps above for detailed results." >> $GITHUB_STEP_SUMMARY
