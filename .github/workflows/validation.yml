name: Validation

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "*.md"
      - ".commitlintrc.json"
      - ".release-please-config.json"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Single validation job for easy required status checking
  validation:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Commit validation (only on PRs)
      - name: Validate conventional commits
        if: github.event_name == 'pull_request'
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json

      # Configuration validation
      - name: Install tools
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          sudo apt-get update && sudo apt-get install -y jq

      - name: Validate configuration files
        run: |
          echo "üîç Validating configuration files..."

          # Check if release config generation script exists and run it
          if [ -f "scripts/generate-release-configs.sh" ]; then
            chmod +x scripts/generate-release-configs.sh
            ./scripts/generate-release-configs.sh

            if git diff --exit-code .commitlintrc.json .release-please-config.json; then
              echo "‚úÖ Release configuration files are up to date"
            else
              echo "‚ùå Release configuration files are out of date"
              echo "Run 'make generate-release-configs' to update them"
              git diff --name-only .commitlintrc.json .release-please-config.json
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Release config generation script not found, skipping validation"
          fi

      # Documentation validation
      - name: Setup Node.js for documentation tools
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install documentation dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, skipping npm dependencies"
          fi

      - name: Lint markdown files
        run: |
          echo "üîç Linting markdown files..."
          if [ -f package.json ] && npm list markdownlint-cli2 >/dev/null 2>&1; then
            npm run lint:md || echo "‚ö†Ô∏è Markdown linting found issues"
          else
            echo "‚ö†Ô∏è Markdown linting not configured, skipping"
          fi

      - name: Check for broken links
        uses: tcort/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ".github/markdown-link-check.json"
        continue-on-error: true

      # Code quality checks
      - name: Check for TODO/FIXME comments
        run: |
          echo "üîç Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" --include="*.go" --include="*.md" .; then
            echo "‚ö†Ô∏è Found TODO/FIXME comments - consider addressing before release"
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi
        continue-on-error: true

      - name: Check file permissions
        run: |
          echo "üîç Checking file permissions..."
          # Check for executable files that shouldn't be
          find . -type f -perm /111 ! -path "./.git/*" ! -path "./build/*" ! -path "./scripts/*" ! -name "*.sh" ! -name "dev-stack*" | while read -r file; do
            echo "‚ö†Ô∏è Unexpected executable file: $file"
          done

      - name: Validation summary
        if: always()
        run: |
          echo "## üìã Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Configuration**: Files validated" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Documentation**: Checked for issues" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Code Quality**: Basic checks completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìã See individual steps above for detailed results." >> $GITHUB_STEP_SUMMARY

  # Documentation generation and deployment
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Go
        uses: ./.github/actions/setup-go-version

      - name: Build CLI for documentation
        run: make build

      - name: Generate CLI documentation
        run: |
          mkdir -p content/cli-reference
          if ./build/dev-stack help > content/cli-reference/index.md 2>&1; then
            sed -i '1i---\ntitle: "CLI Reference"\ndescription: "Complete command reference for dev-stack CLI"\nweight: 30\n---\n\n# CLI Reference\n' content/cli-reference/index.md
            echo "‚úÖ CLI help documentation generated successfully"
          else
            cat > content/cli-reference/index.md << 'EOF'
---
title: "CLI Reference"
description: "Complete command reference for dev-stack CLI"
weight: 30
---

# CLI Reference

CLI help generation is not yet implemented.

Check back soon or [contribute to the project]({{< ref "/contributing" >}}) to help add this feature!
EOF
            echo "‚ö†Ô∏è CLI help generation failed, using placeholder"
          fi

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Build with Hugo
        run: hugo --minify

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
