version: "3"

# ============================================================================
# VARIABLES
# ============================================================================
vars:
  BINARY_NAME: dev-stack
  BUILD_DIR: build
  MODULE_PATH: github.com/isaacgarza/dev-stack
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
  BUILD_DATE:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  LDFLAGS: '-ldflags "-X {{.MODULE_PATH}}/internal/cli.version={{.VERSION}} -X {{.MODULE_PATH}}/internal/cli.commit={{.COMMIT}} -X {{.MODULE_PATH}}/internal/cli.date={{.BUILD_DATE}}"'
  GOLANGCI_LINT_VERSION: "v2.4.0"

# ============================================================================
# TASKS
# ============================================================================
tasks:
  # ----------------------------------------------------------------------------
  # DEFAULT TASK
  # ----------------------------------------------------------------------------
  default:
    desc: "üöÄ Build the binary (default task)"
    silent: true
    cmds:
      - task: build

  # ----------------------------------------------------------------------------
  # BUILD TASKS
  # ----------------------------------------------------------------------------
  build:
    desc: "üî® Build the Go binary for current platform"
    deps: [deps]
    sources:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"
    silent: true
    cmds:
      - echo "üî® Building {{.BINARY_NAME}}..."
      - mkdir -p {{.BUILD_DIR}}
      - go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}} ./cmd/dev-stack
      - echo "‚úÖ Built at {{.BUILD_DIR}}/{{.BINARY_NAME}}"

  build-all:
    desc: "üåç Build binaries for all supported platforms"
    deps: [deps]
    silent: true
    cmds:
      - echo "üåç Building {{.BINARY_NAME}} for all platforms..."
      - mkdir -p {{.BUILD_DIR}}
      - GOOS=linux GOARCH=amd64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-amd64 ./cmd/dev-stack
      - GOOS=linux GOARCH=arm64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-arm64 ./cmd/dev-stack
      - GOOS=darwin GOARCH=amd64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-amd64 ./cmd/dev-stack
      - GOOS=darwin GOARCH=arm64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-arm64 ./cmd/dev-stack
      - GOOS=windows GOARCH=amd64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-windows-amd64.exe ./cmd/dev-stack
      - echo "‚úÖ All binaries built in {{.BUILD_DIR}}/"

  install:
    desc: "üì¶ Install the binary to GOPATH/bin"
    deps: [build]
    silent: true
    cmds:
      - echo "üì¶ Installing {{.BINARY_NAME}}..."
      - go install {{.LDFLAGS}} ./cmd/dev-stack
      - echo "‚úÖ Installed to $(go env GOPATH)/bin/{{.BINARY_NAME}}"

  # ----------------------------------------------------------------------------
  # DEVELOPMENT TASKS
  # ----------------------------------------------------------------------------
  dev:
    desc: "üöÄ Quick start - build and show help"
    deps: [build]
    silent: true
    cmds:
      - echo "üöÄ Running {{.BINARY_NAME}} in development mode..."
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} --help

  watch:
    desc: "üëÄ Watch for changes and rebuild automatically"
    watch: true
    sources:
      - "**/*.go"
    silent: true
    cmds:
      - echo "üëÄ Rebuilding due to changes..."
      - task: build

  # ----------------------------------------------------------------------------
  # TEST MANAGEMENT
  # ----------------------------------------------------------------------------
  test-cleanup-verify:
    desc: "üìä Verify test cleanup and organization"
    cmds:
      - |
        echo "üìä Test file analysis:"
        find . -name "*_test.go" -type f | wc -l | xargs echo "Total test files:"
        find . -name "*_test.go" -exec wc -l {} + | tail -1 | xargs echo "Total test lines:"
        echo ""
        echo "üîç Init package test files:"
        find ./internal/pkg/cli/handlers/init -name "*_test.go" -exec basename {} \; | sort
        echo ""
        echo "üìà Init package test coverage:"
        go test -cover ./internal/pkg/cli/handlers/init/...

  # ----------------------------------------------------------------------------
  # DEPENDENCY MANAGEMENT
  # ----------------------------------------------------------------------------
  deps:
    desc: "üì• Download and tidy Go dependencies"
    silent: true
    cmds:
      - echo "üì• Downloading Go dependencies..."
      - go mod download
      - go mod tidy
      - echo "‚úÖ Dependencies updated"

  # ----------------------------------------------------------------------------
  # GIT AUTOMATION
  # ----------------------------------------------------------------------------
  commit:
    desc: "üìù Generate and create commit with dynamic message based on staged changes"
    silent: true
    cmds:
      - |
        # Check if there are staged changes
        STAGED_FILES=$(git diff --cached --name-only)
        if [ -z "$STAGED_FILES" ]; then
          echo "‚ùå No staged changes found. Use 'git add' first."
          exit 1
        fi

        echo "üìù Analyzing staged changes..."

        # Generate commit type and scope
        TYPE="feat"
        SCOPE=""
        DESCRIPTION=""

        # Analyze file types
        if echo "$STAGED_FILES" | grep -q "_test\.go"; then
          TYPE="test"
          TEST_COUNT=$(echo "$STAGED_FILES" | grep "_test\.go" | wc -l | tr -d ' ')
          DESCRIPTION="add $TEST_COUNT test files"
        fi

        if echo "$STAGED_FILES" | grep -q "\.go" | grep -v "_test\.go"; then
          if [ "$TYPE" = "test" ]; then
            TYPE="feat"
            DESCRIPTION="add tests and update code"
          else
            TYPE="feat"
            SRC_COUNT=$(echo "$STAGED_FILES" | grep "\.go" | grep -v "_test\.go" | wc -l | tr -d ' ')
            DESCRIPTION="update $SRC_COUNT source files"
          fi
        fi

        if echo "$STAGED_FILES" | grep -q "\.yml\|\.yaml"; then
          if echo "$STAGED_FILES" | grep -q "\.golangci\.yml"; then
            TYPE="config"
            SCOPE="lint"
            DESCRIPTION="update linting configuration"
          elif echo "$STAGED_FILES" | grep -q "Taskfile\.yml"; then
            TYPE="build"
            SCOPE="tasks"
            DESCRIPTION="update build automation"
          elif echo "$STAGED_FILES" | grep -q "ci\.yml\|\.github"; then
            TYPE="ci"
            DESCRIPTION="update CI/CD configuration"
          else
            TYPE="config"
            DESCRIPTION="update configuration files"
          fi
        fi

        if echo "$STAGED_FILES" | grep -q "README\|\.md"; then
          TYPE="docs"
          DESCRIPTION="update documentation"
        fi

        if echo "$STAGED_FILES" | grep -q "package\.json\|go\.mod\|go\.sum"; then
          TYPE="deps"
          DESCRIPTION="update dependencies"
        fi

        # Check for specific patterns in file names
        if echo "$STAGED_FILES" | grep -qi "fix\|bug"; then
          TYPE="fix"
        fi

        # Build commit message
        if [ -n "$SCOPE" ]; then
          COMMIT_MSG="$TYPE($SCOPE): $DESCRIPTION"
        else
          COMMIT_MSG="$TYPE: $DESCRIPTION"
        fi

        # Show what will be committed
        echo "üîç Staged files:"
        echo "$STAGED_FILES" | sed 's/^/  /'
        echo ""
        echo "üìù Generated commit message:"
        echo "  $COMMIT_MSG"
        echo ""

        # Commit with generated message
        git commit -m "$COMMIT_MSG"
        echo "‚úÖ Committed successfully!"

  # === GIT AUTOMATION ===
  create-pr:
    desc: "üîÄ Create a pull request with auto-generated title and description based on branch changes"
    silent: true
    cmds:
      - |
        BRANCH=$(git branch --show-current)
        if [ "$BRANCH" = "main" ]; then
          echo "‚ùå Cannot create PR from main branch"
          exit 1
        fi

        echo "üîÄ Analyzing changes in branch: $BRANCH"

        # Get commit messages and changed files
        COMMITS=$(git log --oneline main..$BRANCH)
        COMMIT_COUNT=$(git rev-list --count main..$BRANCH)
        CHANGED_FILES=$(git diff --name-only main..$BRANCH)

        # Analyze changes to generate title
        TITLE="feat: "
        if echo "$CHANGED_FILES" | grep -q "_test\.go"; then
          TITLE="${TITLE}Add tests and "
        fi
        if echo "$CHANGED_FILES" | grep -q "\.yml\|\.yaml"; then
          TITLE="${TITLE}improve CI/CD and "
        fi
        if echo "$CHANGED_FILES" | grep -q "Taskfile\.yml"; then
          TITLE="${TITLE}enhance build automation and "
        fi
        if echo "$COMMITS" | grep -qi "fix\|bug"; then
          TITLE="${TITLE}fix issues and "
        fi
        TITLE="${TITLE}improve codebase"

        # Generate description based on file changes
        DESCRIPTION="## üöÄ Changes Summary

        **Branch:** \`$BRANCH\`
        **Commits:** $COMMIT_COUNT

        ### üìù Recent Commits
        \`\`\`
        $COMMITS
        \`\`\`

        ### üìÅ Files Changed"

        if echo "$CHANGED_FILES" | grep -q "_test\.go"; then
          TEST_COUNT=$(echo "$CHANGED_FILES" | grep "_test\.go" | wc -l)
          DESCRIPTION="$DESCRIPTION
        - **üß™ Tests:** $TEST_COUNT test files added/modified"
        fi

        if echo "$CHANGED_FILES" | grep -q "\.go" | grep -v "_test\.go"; then
          SRC_COUNT=$(echo "$CHANGED_FILES" | grep "\.go" | grep -v "_test\.go" | wc -l)
          DESCRIPTION="$DESCRIPTION
        - **üì¶ Source Code:** $SRC_COUNT Go files modified"
        fi

        if echo "$CHANGED_FILES" | grep -q "\.yml\|\.yaml"; then
          CONFIG_COUNT=$(echo "$CHANGED_FILES" | grep "\.yml\|\.yaml" | wc -l)
          DESCRIPTION="$DESCRIPTION
        - **‚öôÔ∏è Configuration:** $CONFIG_COUNT YAML files updated"
        fi

        if echo "$CHANGED_FILES" | grep -q "Taskfile\.yml"; then
          DESCRIPTION="$DESCRIPTION
        - **üîß Build System:** Taskfile.yml updated"
        fi

        DESCRIPTION="$DESCRIPTION

        ### üîç Changed Files
        \`\`\`
        $CHANGED_FILES
        \`\`\`

        ## üß™ Testing
        - [ ] All tests pass
        - [ ] No breaking changes
        - [ ] Documentation updated if needed"

        # Create PR
        gh pr create \
          --title "$TITLE" \
          --body "$DESCRIPTION" \
          --assignee @me

  push-and-pr:
    desc: "üöÄ Push current branch and create PR in one command"
    silent: true
    cmds:
      - |
        BRANCH=$(git branch --show-current)
        echo "üöÄ Pushing branch: $BRANCH"
        git push -u origin $BRANCH
      - task: create-pr

  pre-commit:
    desc: "üîí Run all pre-commit checks"
    silent: true
    cmds:
      - echo "üîí Running pre-commit checks..."
      - task: pre-commit-fix
      - task: pre-commit-verify

  pre-commit-fix:
    desc: "üîß Auto-fix formatting and module issues"
    silent: true
    cmds:
      - echo "üîß Auto-fixing formatting and modules..."
      - task: fmt
      - go mod tidy

  pre-commit-verify:
    desc: "‚úÖ Verify all checks pass after fixes"
    silent: true
    cmds:
      - |
        echo "‚úÖ Verifying fixes..."
        UNSTAGED_CHANGES=$(git diff --name-only)
        if [ -n "$UNSTAGED_CHANGES" ]; then
          echo ""
          echo "‚ùå Pre-commit failed: Files were modified during formatting/tidy"
          echo ""
          echo "üìã Modified files:"
          git diff --name-only
          echo ""
          echo "üîß Please add these changes and commit again:"
          echo "   git add ."
          echo "   git commit"
          echo ""
          exit 1
        fi
      - task: lint
      - echo "‚úÖ Pre-commit checks passed"

  pre-push:
    desc: "üöÄ Run all pre-push checks"
    silent: true
    cmds:
      - echo "üöÄ Running pre-push checks..."
      - task: test
      - task: test-coverage-check
      - task: build
      - task: docs-lastmod-update
      - echo "‚úÖ Pre-push checks passed"

  fmt-check:
    desc: "üìù Check Go code formatting"
    silent: true
    cmds:
      - |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "‚ùå Code is not formatted. Run: task fmt"
          gofmt -s -l .
          exit 1
        fi
        echo "‚úÖ Code formatting OK"

  mod-tidy-check:
    desc: "üì¶ Check if go.mod is tidy"
    silent: true
    cmds:
      - go mod tidy
      - |
        if ! git diff --exit-code go.mod go.sum; then
          echo "‚ùå go.mod/go.sum not tidy. Run: go mod tidy"
          exit 1
        fi
        echo "‚úÖ Go modules are tidy"

  lint-md:
    desc: "üìù Lint markdown files"
    silent: true
    cmds:
      - echo "üìù Linting markdown files..."
      - cd docs-site && npm run lint:md
      - echo "‚úÖ Markdown linting passed"

  docs-sync-check:
    desc: "üìö Check if documentation is in sync"
    silent: true
    cmds:
      - cd docs-site && npm run docs:generate
      - |
        # Check if there are content changes (ignoring timestamp changes in frontmatter)
        DIFF_OUTPUT=$(git diff docs-site/content/_index.md docs-site/content/reference.md docs-site/content/services.md | grep -v "^[+-]date:" | grep -v "^[+-]lastmod:")
        if echo "$DIFF_OUTPUT" | grep -q "^[+-]"; then
          echo "‚ùå Documentation content out of sync. Run: cd docs-site && npm run docs:generate"
          echo "$DIFF_OUTPUT"
          exit 1
        fi
        echo "‚úÖ Documentation is in sync"

  docs-lastmod-update:
    desc: "üóìÔ∏è Update lastmod dates for changed documentation files"
    silent: true
    cmds:
      - ./scripts/update-docs-lastmod.sh

  setup-hooks:
    desc: "ü™ù Install Git hooks for pre-commit and pre-push checks"
    silent: true
    cmds:
      - ./scripts/setup-hooks.sh

  refactor-tests:
    desc: "üîß Refactor test files to use constants instead of magic strings"
    silent: true
    cmds:
      - |
        echo "üîß Refactoring test magic strings..."
        echo "‚úÖ Test constants file created at internal/pkg/cli/handlers/init/test_constants.go"
        echo "üìù Manual refactoring recommended for context-specific strings"
        echo ""
        echo "Common patterns to replace:"
        echo "  - \"dev-stack-test-*\" ‚Üí TestTempDirPattern"
        echo "  - \"dev-stack\" ‚Üí constants.DevStackDir"
        echo "  - \"dev-stack-config.yml\" ‚Üí constants.ConfigFileName"
        echo "  - \"test\" ‚Üí TestConfigContent (when used as file content)"
        echo "  - \"postgres\" ‚Üí TestServicePostgres"
        echo "  - \"already initialized\" ‚Üí MsgAlreadyInitialized"

  # ----------------------------------------------------------------------------
  # TESTING & QUALITY ASSURANCE
  # ----------------------------------------------------------------------------
  test:
    desc: "üß™ Run all tests with coverage report"
    deps: [deps]
    sources:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "coverage.out"
    silent: true
    cmds:
      - echo "üß™ Running tests with coverage..."
      - go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - echo "‚úÖ Coverage report at coverage.out"

  test-coverage:
    desc: "üìä View test coverage report in browser"
    deps: [test]
    silent: true
    cmds:
      - echo "üìä Opening coverage report..."
      - go tool cover -html=coverage.out

  test-coverage-check:
    desc: "üéØ Check if test coverage meets minimum threshold"
    deps: [test]
    silent: true
    cmds:
      - |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        MIN_COVERAGE=15.0
        echo "Current test coverage: ${COVERAGE}%"
        echo "Minimum threshold: ${MIN_COVERAGE}%"

        if command -v bc >/dev/null 2>&1; then
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "‚ùå Test coverage ${COVERAGE}% is below minimum threshold ${MIN_COVERAGE}%"
            exit 1
          else
            echo "‚úÖ Test coverage ${COVERAGE}% meets minimum threshold ${MIN_COVERAGE}%"
          fi
        else
          # Fallback for systems without bc
          COVERAGE_INT=$(echo "$COVERAGE" | cut -d'.' -f1)
          MIN_COVERAGE_INT=$(echo "$MIN_COVERAGE" | cut -d'.' -f1)
          if [ "$COVERAGE_INT" -lt "$MIN_COVERAGE_INT" ]; then
            echo "‚ùå Test coverage ${COVERAGE}% is below minimum threshold ${MIN_COVERAGE}%"
            exit 1
          else
            echo "‚úÖ Test coverage ${COVERAGE}% meets minimum threshold ${MIN_COVERAGE}%"
          fi
        fi

  test-unit:
    desc: "üß™ Run unit tests only"
    deps: [deps]
    silent: true
    cmds:
      - echo "üß™ Running unit tests..."
      - go test -race -short ./...
      - echo "‚úÖ Unit tests passed"

  test-integration:
    desc: "üîó Run integration tests"
    deps: [deps]
    silent: true
    cmds:
      - echo "üîó Running integration tests..."
      - go test -race -tags=integration ./...
      - echo "‚úÖ Integration tests passed"

  test-all:
    desc: "üß™ Run all test types"
    deps: [test-unit, test-integration]
    silent: true
    cmds:
      - echo "‚úÖ All tests completed successfully"

  lint:
    desc: "üîç Run comprehensive linting (vet + fmt + golangci-lint)"
    deps: [deps]
    silent: true
    cmds:
      - echo "üîç Running go vet..."
      - go vet ./...
      - echo "üîç Checking code formatting..."
      - |
        if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
          echo "‚ùå Code is not formatted. Run 'task fmt' to fix:"
          gofmt -l .
          exit 1
        fi
      - echo "‚úÖ Basic linting passed"
      - echo "üîç Running golangci-lint config verify..."
      - |
        if [ ! -f .golangci.yml ]; then
          echo "‚ùå .golangci.yml config file not found!"
          exit 1
        fi
        if [ ! -f $(go env GOPATH)/bin/golangci-lint ]; then
          echo "üì¶ Installing golangci-lint {{.GOLANGCI_LINT_VERSION}}..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin {{.GOLANGCI_LINT_VERSION}}
        fi
        $(go env GOPATH)/bin/golangci-lint config verify
      - echo "‚úÖ golangci-lint config is valid"
      - echo "üîç Running golangci-lint..."
      - $(go env GOPATH)/bin/golangci-lint run ./...
      - echo "‚úÖ All linting checks passed!"

  fmt:
    desc: "‚ú® Format Go code with gofmt and goimports"
    silent: true
    cmds:
      - echo "‚ú® Formatting Go code..."
      - |
        if [ ! -f $(go env GOPATH)/bin/goimports ]; then
          echo "üì¶ Installing goimports..."
          go install golang.org/x/tools/cmd/goimports@latest
        fi
      - go fmt ./...
      - $(go env GOPATH)/bin/goimports -w .
      - echo "‚úÖ Code formatted"

  security:
    desc: "üîí Run security vulnerability scan"
    deps: [deps]
    silent: true
    cmds:
      - echo "üîí Running security scan..."
      - |
        if ! command -v govulncheck >/dev/null 2>&1; then
          echo "üì¶ Installing govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
        fi
      - govulncheck ./...
      - echo "‚úÖ Security scan complete"

  # ----------------------------------------------------------------------------
  # DOCUMENTATION
  # ----------------------------------------------------------------------------
  docs:
    desc: "üìö Generate documentation"
    deps: [build]
    silent: true
    cmds:
      - echo "üìö Generating documentation..."
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} docs --verbose
      - echo "‚úÖ Documentation generated"

  # ----------------------------------------------------------------------------
  # DOCKER
  # ----------------------------------------------------------------------------
  docker-build:
    desc: "üê≥ Build Docker image"
    silent: true
    cmds:
      - echo "üê≥ Building Docker image..."
      - docker build -t {{.BINARY_NAME}}:{{.VERSION}} .
      - echo "‚úÖ Docker image built at {{.BINARY_NAME}}:{{.VERSION}}"

  docker-run:
    desc: "üê≥ Run Docker container interactively"
    deps: [docker-build]
    silent: true
    cmds:
      - echo "üê≥ Running Docker container..."
      - docker run --rm -it {{.BINARY_NAME}}:{{.VERSION}}

  # ----------------------------------------------------------------------------
  # CLEANUP
  # ----------------------------------------------------------------------------
  clean:
    desc: "üßπ Remove build artifacts and generated files"
    silent: true
    cmds:
      - echo "üßπ Cleaning build artifacts..."
      - rm -rf {{.BUILD_DIR}}/
      - rm -f coverage.out *.test *.prof
      - go clean -cache
      - echo "‚úÖ Clean complete"

  clean-all:
    desc: "üßπ Deep clean - remove all generated files including dependencies"
    deps: [clean]
    silent: true
    cmds:
      - echo "üßπ Deep cleaning..."
      - go clean -modcache
      - rm -rf vendor/
      - echo "‚úÖ Deep clean complete"

  # ----------------------------------------------------------------------------
  # UTILITY
  # ----------------------------------------------------------------------------
  version:
    desc: "‚ÑπÔ∏è  Show version information"
    silent: true
    cmds:
      - echo "üìã Version Information:"
      - echo "   Version:" {{.VERSION}}
      - echo "   Commit:"  {{.COMMIT}}
      - echo "   Date:"    {{.BUILD_DATE}}

  help:
    desc: "‚ùì Show this help message"
    silent: true
    cmds:
      - echo "üõ†Ô∏è  dev-stack Task Runner"
      - echo ""
      - echo "üìã Quick Start:"
      - echo "   task build     - Build the binary"
      - echo "   task dev       - Build and run"
      - echo "   task test      - Run tests"
      - echo "   task lint      - Check code quality"
      - echo ""
      - echo "üî® Build Tasks:"
      - echo "   build          - Build binary for current platform"
      - echo "   build-all      - Build for all platforms"
      - echo "   install        - Install to GOPATH/bin"
      - echo ""
      - echo "üöÄ Development:"
      - echo "   dev            - Quick start (build + help)"
      - echo "   watch          - Auto-rebuild on changes"
      - echo "   deps           - Update dependencies"
      - echo ""
      - echo "üß™ Testing & Quality:"
      - echo "   test           - Run tests with coverage"
      - echo "   test-unit      - Run unit tests only"
      - echo "   test-integration - Run integration tests"
      - echo "   test-all       - Run all test types"
      - echo "   test-coverage  - View coverage in browser"
      - echo "   test-coverage-check - Check coverage threshold"
      - echo "   lint           - Run all linting checks"
      - echo "   fmt            - Format code"
      - echo "   security       - Security vulnerability scan"
      - echo ""
      - echo "üìö Documentation:"
      - echo "   docs           - Generate documentation"
      - echo ""
      - echo "üê≥ Docker:"
      - echo "   docker-build   - Build Docker image"
      - echo "   docker-run     - Run in container"
      - echo ""
      - echo "üßπ Cleanup:"
      - echo "   clean          - Remove build artifacts"
      - echo "   clean-all      - Deep clean everything"
      - echo ""
      - echo "‚ÑπÔ∏è  Info:"
      - echo "   version        - Show version info"
      - echo "   help           - Show this help"
      - echo ""
      - echo "üí° Examples:"
      - echo "   task build && ./build/dev-stack --help"
      - echo "   task watch  (Auto-rebuild on file changes)"
      - echo "   task test && task lint"
      - echo ""
      - echo "For detailed task list:" "task --list"
