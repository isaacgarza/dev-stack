version: "3"

vars:
  BINARY_NAME: dev-stack
  BUILD_DIR: build
  MODULE_PATH: github.com/isaacgarza/dev-stack
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
  BUILD_DATE:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  LDFLAGS: '-ldflags "-X {{.MODULE_PATH}}/internal/cli.version={{.VERSION}} -X {{.MODULE_PATH}}/internal/cli.commit={{.COMMIT}} -X {{.MODULE_PATH}}/internal/cli.date={{.BUILD_DATE}}"'
  GOLANGCI_LINT_VERSION: "v2.4.0"

tasks:
  # Default task - most common action
  default:
    desc: "🚀 Build the binary (default task)"
    silent: true
    cmds:
      - task: build

  # === BUILD TASKS ===
  build:
    desc: "🔨 Build the Go binary for current platform"
    deps: [deps]
    sources:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"
    silent: true
    cmds:
      - echo "🔨 Building {{.BINARY_NAME}}..."
      - mkdir -p {{.BUILD_DIR}}
      - go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}} ./cmd/dev-stack
      - echo "✅ Built at {{.BUILD_DIR}}/{{.BINARY_NAME}}"

  build-all:
    desc: "🌍 Build binaries for all supported platforms"
    deps: [deps]
    silent: true
    cmds:
      - echo "🌍 Building {{.BINARY_NAME}} for all platforms..."
      - mkdir -p {{.BUILD_DIR}}
      - GOOS=linux GOARCH=amd64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-amd64 ./cmd/dev-stack
      - GOOS=linux GOARCH=arm64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-arm64 ./cmd/dev-stack
      - GOOS=darwin GOARCH=amd64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-amd64 ./cmd/dev-stack
      - GOOS=darwin GOARCH=arm64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-arm64 ./cmd/dev-stack
      - GOOS=windows GOARCH=amd64 go build {{.LDFLAGS}} -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-windows-amd64.exe ./cmd/dev-stack
      - echo "✅ All binaries built in {{.BUILD_DIR}}/"

  install:
    desc: "📦 Install the binary to GOPATH/bin"
    deps: [build]
    silent: true
    cmds:
      - echo "📦 Installing {{.BINARY_NAME}}..."
      - go install {{.LDFLAGS}} ./cmd/dev-stack
      - echo "✅ Installed to $(go env GOPATH)/bin/{{.BINARY_NAME}}"

  # === DEVELOPMENT TASKS ===
  dev:
    desc: "🚀 Quick start - build and show help"
    deps: [build]
    silent: true
    cmds:
      - echo "🚀 Running {{.BINARY_NAME}} in development mode..."
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} --help

  watch:
    desc: "👀 Watch for changes and rebuild automatically"
    watch: true
    sources:
      - "**/*.go"
    silent: true
    cmds:
      - echo "👀 Rebuilding due to changes..."
      - task: build

  deps:
    desc: "📥 Download and tidy Go dependencies"
    silent: true
    cmds:
      - echo "📥 Downloading Go dependencies..."
      - go mod download
      - go mod tidy
      - echo "✅ Dependencies updated"

  # === PRE-COMMIT CHECKS ===
  pre-commit:
    desc: "🔒 Run all pre-commit checks"
    silent: true
    cmds:
      - echo "🔒 Running pre-commit checks..."
      - task: fmt-check
      - task: mod-tidy-check
      - task: lint
      - echo "✅ Pre-commit checks passed"

  pre-push:
    desc: "🚀 Run all pre-push checks"
    silent: true
    cmds:
      - echo "🚀 Running pre-push checks..."
      - task: pre-commit
      - task: test
      - task: build
      - task: docs-lastmod-update
      - echo "✅ Pre-push checks passed"

  fmt-check:
    desc: "📝 Check Go code formatting"
    silent: true
    cmds:
      - |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not formatted. Run: task fmt"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ Code formatting OK"

  mod-tidy-check:
    desc: "📦 Check if go.mod is tidy"
    silent: true
    cmds:
      - go mod tidy
      - |
        if ! git diff --exit-code go.mod go.sum; then
          echo "❌ go.mod/go.sum not tidy. Run: go mod tidy"
          exit 1
        fi
        echo "✅ Go modules are tidy"

  lint-md:
    desc: "📝 Lint markdown files"
    silent: true
    cmds:
      - echo "📝 Linting markdown files..."
      - cd docs-site && npm run lint:md
      - echo "✅ Markdown linting passed"

  docs-sync-check:
    desc: "📚 Check if documentation is in sync"
    silent: true
    cmds:
      - cd docs-site && npm run docs:generate
      - |
        # Check if there are content changes (ignoring timestamp changes in frontmatter)
        DIFF_OUTPUT=$(git diff docs-site/content/_index.md docs-site/content/reference.md docs-site/content/services.md | grep -v "^[+-]date:" | grep -v "^[+-]lastmod:")
        if echo "$DIFF_OUTPUT" | grep -q "^[+-]"; then
          echo "❌ Documentation content out of sync. Run: cd docs-site && npm run docs:generate"
          echo "$DIFF_OUTPUT"
          exit 1
        fi
        echo "✅ Documentation is in sync"

  docs-lastmod-update:
    desc: "🗓️ Update lastmod dates for changed documentation files"
    silent: true
    cmds:
      - ./scripts/update-docs-lastmod.sh

  setup-hooks:
    desc: "🪝 Install Git hooks for pre-commit and pre-push checks"
    silent: true
    cmds:
      - ./scripts/setup-hooks.sh

  # === TESTING & QUALITY ===
  test:
    desc: "🧪 Run all tests with coverage report"
    deps: [deps]
    sources:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "coverage.out"
    silent: true
    cmds:
      - echo "🧪 Running tests with coverage..."
      - go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - echo "✅ Coverage report at coverage.out"

  test-coverage:
    desc: "📊 View test coverage report in browser"
    deps: [test]
    silent: true
    cmds:
      - echo "📊 Opening coverage report..."
      - go tool cover -html=coverage.out

  lint:
    desc: "🔍 Run comprehensive linting (vet + fmt + golangci-lint)"
    deps: [deps]
    silent: true
    cmds:
      - echo "🔍 Running go vet..."
      - go vet ./...
      - echo "🔍 Checking code formatting..."
      - |
        if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not formatted. Run 'task fmt' to fix:"
          gofmt -l .
          exit 1
        fi
      - echo "✅ Basic linting passed"
      - echo "🔍 Running golangci-lint..."
      - |
        if [ ! -f $(go env GOPATH)/bin/golangci-lint ]; then
          echo "📦 Installing golangci-lint {{.GOLANGCI_LINT_VERSION}}..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin {{.GOLANGCI_LINT_VERSION}}
        fi
      - $(go env GOPATH)/bin/golangci-lint run ./...
      - echo "✅ All linting checks passed!"

  fmt:
    desc: "✨ Format Go code with gofmt and goimports"
    silent: true
    cmds:
      - echo "✨ Formatting Go code..."
      - |
        if [ ! -f $(go env GOPATH)/bin/goimports ]; then
          echo "📦 Installing goimports..."
          go install golang.org/x/tools/cmd/goimports@latest
        fi
      - go fmt ./...
      - $(go env GOPATH)/bin/goimports -w .
      - echo "✅ Code formatted"

  security:
    desc: "🔒 Run security vulnerability scan"
    deps: [deps]
    silent: true
    cmds:
      - echo "🔒 Running security scan..."
      - |
        if ! command -v govulncheck >/dev/null 2>&1; then
          echo "📦 Installing govulncheck..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
        fi
      - govulncheck ./...
      - echo "✅ Security scan complete"

  # === DOCUMENTATION ===
  docs:
    desc: "📚 Generate documentation"
    deps: [build]
    silent: true
    cmds:
      - echo "📚 Generating documentation..."
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} docs --verbose
      - echo "✅ Documentation generated"

  # === DOCKER ===
  docker-build:
    desc: "🐳 Build Docker image"
    silent: true
    cmds:
      - echo "🐳 Building Docker image..."
      - docker build -t {{.BINARY_NAME}}:{{.VERSION}} .
      - echo "✅ Docker image built at {{.BINARY_NAME}}:{{.VERSION}}"

  docker-run:
    desc: "🐳 Run Docker container interactively"
    deps: [docker-build]
    silent: true
    cmds:
      - echo "🐳 Running Docker container..."
      - docker run --rm -it {{.BINARY_NAME}}:{{.VERSION}}

  # === CLEANUP ===
  clean:
    desc: "🧹 Remove build artifacts and generated files"
    silent: true
    cmds:
      - echo "🧹 Cleaning build artifacts..."
      - rm -rf {{.BUILD_DIR}}/
      - rm -f coverage.out *.test *.prof
      - go clean -cache
      - echo "✅ Clean complete"

  clean-all:
    desc: "🧹 Deep clean - remove all generated files including dependencies"
    deps: [clean]
    silent: true
    cmds:
      - echo "🧹 Deep cleaning..."
      - go clean -modcache
      - rm -rf vendor/
      - echo "✅ Deep clean complete"

  # === UTILITY ===
  version:
    desc: "ℹ️  Show version information"
    silent: true
    cmds:
      - echo "📋 Version Information:"
      - echo "   Version:" {{.VERSION}}
      - echo "   Commit:"  {{.COMMIT}}
      - echo "   Date:"    {{.BUILD_DATE}}

  help:
    desc: "❓ Show this help message"
    silent: true
    cmds:
      - echo "🛠️  dev-stack Task Runner"
      - echo ""
      - echo "📋 Quick Start:"
      - echo "   task build     - Build the binary"
      - echo "   task dev       - Build and run"
      - echo "   task test      - Run tests"
      - echo "   task lint      - Check code quality"
      - echo ""
      - echo "🔨 Build Tasks:"
      - echo "   build          - Build binary for current platform"
      - echo "   build-all      - Build for all platforms"
      - echo "   install        - Install to GOPATH/bin"
      - echo ""
      - echo "🚀 Development:"
      - echo "   dev            - Quick start (build + help)"
      - echo "   watch          - Auto-rebuild on changes"
      - echo "   deps           - Update dependencies"
      - echo ""
      - echo "🧪 Testing & Quality:"
      - echo "   test           - Run tests with coverage"
      - echo "   test-coverage  - View coverage in browser"
      - echo "   lint           - Run all linting checks"
      - echo "   fmt            - Format code"
      - echo "   security       - Security vulnerability scan"
      - echo ""
      - echo "📚 Documentation:"
      - echo "   docs           - Generate documentation"
      - echo ""
      - echo "🐳 Docker:"
      - echo "   docker-build   - Build Docker image"
      - echo "   docker-run     - Run in container"
      - echo ""
      - echo "🧹 Cleanup:"
      - echo "   clean          - Remove build artifacts"
      - echo "   clean-all      - Deep clean everything"
      - echo ""
      - echo "ℹ️  Info:"
      - echo "   version        - Show version info"
      - echo "   help           - Show this help"
      - echo ""
      - echo "💡 Examples:"
      - echo "   task build && ./build/dev-stack --help"
      - echo "   task watch  (Auto-rebuild on file changes)"
      - echo "   task test && task lint"
      - echo ""
      - echo "For detailed task list:" "task --list"
